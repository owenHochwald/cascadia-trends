import type { FilterState } from "./common-types";

// Summary Statistics Response
export type SummaryResponse = {
    totalListings: number;
    averagePrice: number;
    medianPrice: number;
    averageSqft: number;
    medianSqft: number;
    averageDaysOnMarket: number;
    pricePerSqft: number;
    bedroomDistribution: Record<number, number>; // bedroom count -> number of listings
    lastUpdated: string;
}

// Scatter Plot Data Response
export type ScatterDataPoint = {
    id: string;
    price: number;
    sqft: number;
    bedrooms: number;
    bathrooms: number;
    daysOnMarket: number;
    listingDate: string;
    pricePerSqft: number;
    propertyType: 'house' | 'condo' | 'townhouse';
    neighborhood?: string;
}

export type ScatterResponse = {
    points: ScatterDataPoint[];
    totalCount: number;
    correlationCoefficient: number; // price vs sqft correlation
    metadata: {
        priceRange: [number, number];
        sqftRange: [number, number];
        generatedAt: string;
    };
}

// Trends Data Response
export type TrendDataPoint = {
    date: string; // ISO date string (YYYY-MM-DD)
    averagePrice: number;
    medianPrice: number;
    totalListings: number;
    averageDaysOnMarket: number;
    pricePerSqft: number;
}

export type TrendsResponse = {
    trends: TrendDataPoint[];
    periodType: 'monthly' | 'weekly' | 'daily';
    summary: {
        priceChangePercent: number; // percentage change from first to last period
        trendDirection: 'up' | 'down' | 'stable';
        volatility: number; // measure of price volatility
    };
    metadata: {
        dateRange: [string, string];
        generatedAt: string;
    };
}

// Price Distribution Response
export type PriceDistributionBin = {
    range: string; // e.g., "500000-600000"
    rangeMin: number;
    rangeMax: number;
    count: number;
    percentage: number;
}

export type PriceDistributionResponse = {
    distribution: PriceDistributionBin[];
    binWidth: number; // e.g., 100000 for $100k bins
    statistics: {
        mean: number;
        median: number;
        mode: number;
        standardDeviation: number;
        skewness: number;
    };
    metadata: {
        totalProperties: number;
        generatedAt: string;
    };
}

// ===== REDUX STATE TYPES =====

// Generic async state pattern for all data slices
export type AsyncState<T> = {
    data: T | null;
    status: 'idle' | 'loading' | 'succeeded' | 'failed';
    error: string | null;
    lastFetch: string | null; // ISO timestamp of last successful fetch
}

// Specific state types for each slice
export type SummaryState = AsyncState<SummaryResponse>;
export type ScatterState = AsyncState<ScatterResponse>;
export type TrendsState = AsyncState<TrendsResponse>;
export type PriceDistributionState = AsyncState<PriceDistributionResponse>;

// Root state type (will be generated by store.ts, but useful for reference)
export type RootState = {
    filters: FilterState;
    summary: SummaryState;
    scatter: ScatterState;
    trends: TrendsState;
    priceDistribution: PriceDistributionState;
}

// ===== API TYPES =====

// Generic API error response
export type ApiError = {
    message: string;
    code?: string;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    details?: Record<string, any>;
    timestamp: string;
}

// API endpoints enum for type safety
export enum ApiEndpoints {
    SUMMARY = '/summary',
    SCATTER = '/scatter',
    TRENDS = '/trends',
    PRICE_DISTRIBUTION = '/price-distribution',
    NEIGHBORHOODS = '/neighborhoods', // for future use
    PROPERTY_TYPES = '/property-types', // for future use
}

// Request configuration type
export type ApiRequestConfig = {
    endpoint: ApiEndpoints;
    filters: FilterState;
    timeout?: number;
    retries?: number;
}